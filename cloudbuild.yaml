steps:

 # NOTE: When a build is executed from GCP via a github trigger the secret files, and any empty directories, are not there => download from GCP Storage.  The structure of the GCP storage bucket MUST be set up to match the directory structure you are copying, as a recursive copy is carried out to copy the directory structure and files.
- id: 'download environment and certs files'
# Copy the backend .env, frontend e2e .env, database certs, & GCP Storage key files from GCP Storage to the persisted workspace.
  name: 'gcr.io/cloud-builders/gsutil'
  dir: '.'
  args: [
    '-m', 'cp', '-r', '-n',
    'gs://project-perform-gcp-environment-files/*',
    './',
  ]

- id: 'install backend node_modules'
# Install the backend node_modules directory in the persisted workspace.
  name: node:12.13.0
  entrypoint: npm
  args: ['install']

- id: 'install frontend node_modules'
# Install the backend node_modules directory in the persisted workspace.
  name: node:12.13.0
  entrypoint: npm
  dir: './frontend'
  args: ['install']

- id: 'build backend'
# Build the backend in the persisted workspace (replacing the copied in dist files - the built files are deployed).
  name: node:12.13.0
  entrypoint: npm
  args: ['run', 'build']
  # Signal that download from GCP Storage not required
  env:
    - 'IS_GCP_BUILD=true'

- id: 'build frontend'
# Build the frontend in the persisted workspace (replacing the copied in dist files - the built files are deployed).
  name: node:12.13.0
  entrypoint: npm
  dir: './frontend'
  args: ['run', 'build:prod']
  # Signal that download from GCP Storage not required.
  env:
    - 'IS_GCP_BUILD=true'

- id: 'build backend and frontend'
# Build an image with node and puppeteer that can be used for unit test and also by Docker Compose below to start the server in the background.
# See Dockerfile in the utils-build directory for detail - it simply copies in all files in the source context (which is copied in and built above) and exposes a port.
  name: 'gcr.io/cloud-builders/docker'
  dir: backend
  args: [
    'build',
    '--file=Dockerfile.puppeteer',
    '--tag=gcr.io/$PROJECT_ID/application-with-puppeteer',
    '--cache-from=gcr.io/$PROJECT_ID/application-with-puppeteer',
    '.',
  ]

- id: 'unit test backend'
# Run all backend unit tests.
# Must use the image built above that includes Node & Puppeteer.
# See the backend utils directory for details on how the image is built.
  name: 'gcr.io/$PROJECT_ID/application-with-puppeteer'
  env: ['NODE_ENV=staging']
  args: ['npm', 'run', 'test']

- id: 'unit test frontend'
# Run all frontend unit tests.
# Must use the image built above that includes Node & Puppeteer.
  name: 'gcr.io/$PROJECT_ID/application-with-puppeteer'
  dir: './frontend'
  args: ['npm', 'run', 'test:staging']

- id: 'run backend server'
# Run the backend server in the background using Docker Compose - uses the docker-compose.yaml file in the root directory.
# Server is run with NODE_ENV=staging => TEST_PATHS available.
  name: 'docker/compose'
  dir: '/backend'
  args: ['up', '-d']

- id: 'e2e test in build environment'
# Run the frontend e2e using e2e:staging => runs a fresh compile with the environment.e2e file => e2e environment parameters available.
# Backend is running already with TEST_PATHs available.
  name: 'gcr.io/$PROJECT_ID/application-with-puppeteer'
  dir: './frontend'
  args: ['npm', 'run', 'e2e:staging']

- id: 'deploy build for e2e test'
# Deploys using the frontend and backend that are built.
# Frontend production build (=> e2e environment parameters not set).
# (Backend build has only one type).
# (App engine runs using NODE_ENV=production so production database in use).
# Note: This will overwrite any previously build deployed using this step.
  name: 'gcr.io/cloud-builders/gcloud'
  args: [
    'app',
    'deploy',
    '--no-promote',
    '--version=ci-test',
  ]
  timeout: '600s'

- id: 'e2e test the test build'
# Runs e2e test against the newly deployed build.
# Does not use ng e2e => frontend production build from image => e2e environment parameters not available => no cache or errors test.
# Backend runs with NODE_ENV=production => no TEST_PATHS and production database in use.
  name: 'gcr.io/$PROJECT_ID/application-with-puppeteer'
  dir: './frontend'
  env: ['BASE_URL=https://ci-test-dot-$PROJECT_ID.appspot.com']
  args: ['npm', 'run', 'e2e:production']

- id: 'deploy build for go-live but no-promote'
# Deploys from the app.yaml file using the frontend and backend that are built above.  This creates a new application image that is pushed to the production 'versions' but is not promoted.
# Frontend production build (=> e2e environment parameters not set).
# (Backend build has only one type).
# (App engine runs using NODE_ENV=production so production database in use).
  name: 'gcr.io/cloud-builders/gcloud'
  args: [
    'app',
    'deploy',
    '--no-promote',
    '--version=ci-live-$SHORT_SHA',
  ]
  timeout: '600s'

- id: 'promote go-live build'
# Promotes the newly deployed build so it takes all traffic.
  name: 'gcr.io/cloud-builders/gcloud'
  args: [
    'app',
    'versions',
    'migrate',
    'ci-live-$SHORT_SHA',
  ]
  timeout: '600s'

- id: 'e2e test the promoted go-live build'
# Runs e2e test against the newly promoted build.
# Does not use ng e2e => frontend production build from image => e2e environment parameters not available => no cache or errors test.
# Backend runs with NODE_ENV=production => no TEST_PATHS and production database in use.
  name: 'gcr.io/$PROJECT_ID/application-with-puppeteer'
  dir: './frontend'
  args: ['npm', 'run', 'e2e:production']

options:
  machineType: 'N1_HIGHCPU_32'

timeout: 1800s

# Push the Node with Puppeteer image in the GCP Registry.
images: ['gcr.io/$PROJECT_ID/application-with-puppeteer']
