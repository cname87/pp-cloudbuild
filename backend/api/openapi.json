{
  "openapi": "3.0.3",
  "info": {
    "title": "Project Perform API V2",
    "description": "V2.x.x cover the API for a team with sports session reporting.",
    "contact": {
      "name": "Sean Young",
      "email": "cname@yahoo.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "2.1.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080.com/api-v2",
      "description": "Development server"
    },
    {
      "url": "https://project-perform.com/api-v2",
      "description": "Production server"
    }
  ],
  "paths": {
    "/isTestDatabase": {
      "get": {
        "summary": "Returns whether the test database is in use.",
        "description": "Returns true if the test database is in use. If the test database is in use then it is safe to run the api tests.\n",
        "operationId": "getIsTestDatabase",
        "responses": {
          "200": {
            "description": "Test mode returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsTestDatabase"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/members": {
      "get": {
        "summary": "Returns all the members, or as determined by a query string.",
        "description": "Returns all the members, or returns those whose name property starts with the query string.\n",
        "operationId": "getMembers",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "An optional search string to limit the returned list.\nAll members with the name property starting with 'name' will be returned. \n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Members returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Members"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/member": {
      "post": {
        "summary": "Adds a member.",
        "description": "Adds a supplied member.\nA member object without an id property must be supplied in the body.\n",
        "operationId": "addMember",
        "requestBody": {
          "description": "Member detail (without id field).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberWithoutId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Member created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/member/{mid}": {
      "get": {
        "summary": "Returns a specific member.",
        "description": "Get the member defined by the supplied id.\n",
        "operationId": "getMember",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of the member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member information returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Updates a member.",
        "description": "Updates a member. A member object is supplied which must have an id property.\nThe member with that id is updated.\n",
        "operationId": "updateMember",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of the member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          }
        ],
        "requestBody": {
          "description": "Member object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Member"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Member updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "A requested item was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes a member.",
        "description": "Deletes a member defined by the supplied id.\n",
        "operationId": "deleteMember",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of the member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "A requested item was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/member/{mid}/activity": {
      "get": {
        "summary": "Returns all the activity records for a member.",
        "description": "Returns all the activity records for a specific member.\n",
        "operationId": "getActivities",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of the member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activity records returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activities"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Adds an activity record.",
        "description": "Adds a supplied activity record for a member.\nAn activity record object without an id property must be supplied in the body.\n",
        "operationId": "addActivity",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of the member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          }
        ],
        "requestBody": {
          "description": "Activity record (without id field).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityWithoutId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Activity record created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/member/{mid}/activity/{aid}": {
      "get": {
        "summary": "Returns a specific activity record for a specific member",
        "description": "Get the member defined by the supplied id.\n",
        "operationId": "getActivity",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of the member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          },
          {
            "name": "aid",
            "in": "path",
            "description": "The value of the id property of an activity record.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activity record returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Updates an activity record.",
        "description": "Updates an activity record. An activity record is supplied which must have an id property.\nThe activity record with that id is updated.\n",
        "operationId": "updateActivity",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of the member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          },
          {
            "name": "aid",
            "in": "path",
            "description": "The value of the id property of an activity record.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          }
        ],
        "requestBody": {
          "description": "Activity record object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Activity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Activity record updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "A requested item was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes an activity record.",
        "description": "Deletes an activity record defined by the supplied id.\n",
        "operationId": "deleteActivity",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of the member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          },
          {
            "name": "aid",
            "in": "path",
            "description": "The value of the id property of an activity record.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activity record deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "A requested item was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/member/{mid}/scores": {
      "put": {
        "summary": "Updates a specific scores table.",
        "description": "A scores object is supplied which must have a id corresponding to an existing scores object.\nThe scores table with that id is updated with the supplied scores table.\n",
        "operationId": "updateScores",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of a member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          }
        ],
        "requestBody": {
          "description": "Scores object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Scores"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Scores table updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Scores"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "A requested item was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Gets, or creates, a scores table object.",
        "description": "Gets, or creates, a scores table object, as determined by the member id and the date in the body.\n",
        "operationId": "getOrCreateScores",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of a member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          }
        ],
        "requestBody": {
          "description": "Date of table requested.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Date"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Scores table was created or was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Scores"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/member/{mid}/sessions": {
      "put": {
        "summary": "Updates a specific sessions table.",
        "description": "A sessions object is supplied which must have a id corresponding to an existing sessions object.\nThe sessions table with that id is updated with the supplied sessions table.\n",
        "operationId": "updateSessions",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of a member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          }
        ],
        "requestBody": {
          "description": "Sessions object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sessions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Sessions table updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sessions"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "A requested item was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Gets, or creates, a sessions table object.",
        "description": "Gets, or creates, a sessions table object, as determined by the member id and the date in the body.\n",
        "operationId": "getOrCreateSessions",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of a member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          }
        ],
        "requestBody": {
          "description": "Date of table requested.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Date"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Sessions table was created or found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sessions"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/member/{mid}/summary": {
      "get": {
        "summary": "Returns a summary of a number of weeks of scores tables associated with a member.",
        "description": "Returns a summary of a number of weeks of scores tables associated with a member.\nThe number of weeks in the returned summary table is determined by the 'weeks' query parameter.\nIf no scores table is stored for a particular date then it is summarized as a zero score.\n",
        "operationId": "getSummary",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of a member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          },
          {
            "name": "weeks",
            "in": "query",
            "description": "The number of weeks of scores tables to be summarized.\nThe scores tables summarized start from the most recent scores table. \n",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/PositiveInteger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Summary table returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Summary"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ZeroUpInteger": {
        "minimum": 0,
        "type": "integer",
        "description": "Used for scores and fields that might be zero",
        "format": "int32",
        "example": 50
      },
      "PositiveInteger": {
        "minimum": 1,
        "type": "integer",
        "description": "Used for id and other positive integer fields",
        "format": "int32",
        "example": 5
      },
      "Name": {
        "maxLength": 35,
        "type": "string",
        "description": "Member name",
        "format": "string",
        "example": "John Doe"
      },
      "DateString": {
        "maxLength": 24,
        "type": "string",
        "description": "Date string",
        "format": "date-string",
        "example": "2021-07-18T00:00:00.000Z"
      },
      "Date": {
        "type": "object",
        "properties": {
          "date": {
            "$ref": "#/components/schemas/DateString"
          }
        },
        "description": "Simple date object"
      },
      "Object": {
        "type": "object",
        "description": "Represents pre-serialized date objects sent from the backend"
      },
      "MemberWithoutId": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "description": "Member information without id field"
      },
      "Member": {
        "description": "Member information",
        "allOf": [
          {
            "$ref": "#/components/schemas/MemberWithoutId"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/PositiveInteger"
              }
            }
          }
        ]
      },
      "Members": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Member"
        }
      },
      "ActivityWithoutId": {
        "required": [
          "date",
          "duration",
          "memberId",
          "type"
        ],
        "type": "object",
        "properties": {
          "memberId": {
            "$ref": "#/components/schemas/PositiveInteger"
          },
          "date": {
            "description": "Can be sent from backend or from frontend",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateString"
              },
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          },
          "type": {
            "type": "string",
            "format": "binary"
          },
          "duration": {
            "$ref": "#/components/schemas/ZeroUpInteger"
          },
          "comment": {
            "type": "string",
            "format": "binary"
          }
        },
        "description": "Activity record without aid field"
      },
      "Activity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActivityWithoutId"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/PositiveInteger"
              }
            }
          }
        ]
      },
      "Activities": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Activity"
        }
      },
      "Scores-row": {
        "type": "object",
        "properties": {
          "item": {
            "type": "string",
            "format": "binary"
          },
          "monday": {
            "$ref": "#/components/schemas/ZeroUpInteger"
          },
          "tuesday": {
            "$ref": "#/components/schemas/ZeroUpInteger"
          },
          "wednesday": {
            "$ref": "#/components/schemas/ZeroUpInteger"
          },
          "thursday": {
            "$ref": "#/components/schemas/ZeroUpInteger"
          },
          "friday": {
            "$ref": "#/components/schemas/ZeroUpInteger"
          },
          "saturday": {
            "$ref": "#/components/schemas/ZeroUpInteger"
          },
          "sunday": {
            "$ref": "#/components/schemas/ZeroUpInteger"
          }
        }
      },
      "Scores": {
        "required": [
          "date",
          "id",
          "memberId",
          "scores"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PositiveInteger"
          },
          "memberId": {
            "$ref": "#/components/schemas/PositiveInteger"
          },
          "date": {
            "description": "Can be sent from backend or from frontend",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateString"
              },
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          },
          "scores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Scores-row"
            }
          }
        }
      },
      "Sessions-row": {
        "type": "object",
        "properties": {
          "session-type": {
            "type": "string",
            "format": "binary"
          },
          "rpe": {
            "$ref": "#/components/schemas/ZeroUpInteger"
          },
          "duration": {
            "$ref": "#/components/schemas/ZeroUpInteger"
          },
          "comment": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "Sessions": {
        "required": [
          "date",
          "id",
          "memberId",
          "sessions"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PositiveInteger"
          },
          "memberId": {
            "$ref": "#/components/schemas/PositiveInteger"
          },
          "date": {
            "description": "Can be sent from backend or from frontend",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateString"
              },
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          },
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sessions-row"
            }
          }
        }
      },
      "SummaryRow": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        }
      },
      "Summary": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SummaryRow"
        }
      },
      "Count": {
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "count": {
            "$ref": "#/components/schemas/ZeroUpInteger"
          }
        },
        "description": "Count of documents."
      },
      "Error": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/PositiveInteger"
          },
          "message": {
            "type": "string",
            "format": "string",
            "example": "Not found"
          }
        },
        "description": "Error report"
      },
      "IsTestDatabase": {
        "required": [
          "isTestDatabase"
        ],
        "type": "object",
        "properties": {
          "isTestDatabase": {
            "type": "boolean",
            "example": false
          }
        },
        "description": "The value true informs that the test database is in use."
      }
    },
    "responses": {
      "400": {
        "description": "The request is not a valid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "404": {
        "description": "A requested item was not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "503": {
        "description": "The database service is not available.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "default": {
        "description": "Unexpected error.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}
