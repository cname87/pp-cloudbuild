{
  "openapi": "3.0.3",
  "info": {
    "title": "Project Perform API V2",
    "description": "V2.x.x cover the API for a team with sports session reporting.",
    "contact": {
      "name": "Sean Young",
      "email": "cname@yahoo.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "2.1.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080.com/api-v2",
      "description": "Development server"
    },
    {
      "url": "https://project-perform.com/api-v2",
      "description": "Production server"
    }
  ],
  "paths": {
    "/isTestDatabase": {
      "get": {
        "summary": "Returns whether the test database is in use.",
        "description": "Returns true if the test database is in use. If the test database is in use then it is safe to run the api tests.\n",
        "operationId": "getIsTestDatabase",
        "responses": {
          "200": {
            "description": "Test mode returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsTestDatabase"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/members": {
      "get": {
        "summary": "Returns all the members, or as determined by a query string.",
        "description": "Returns all the members, or returns those whose name property starts with the query string.\n",
        "operationId": "getMembers",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "An optional search string to limit the returned list.\nAll members with the name property starting with 'name' will be returned. \n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 35,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Members returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Member"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available now.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Updates a member.",
        "description": "Updates a member. A member object is supplied which must have an id property.\nThe member with that id is updated.\n",
        "operationId": "updateMember",
        "requestBody": {
          "description": "Member object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Member"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Member updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "A member with the supplied member ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available now.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Adds a member.",
        "description": "Adds a supplied member.\nA member object without an id property must be supplied in the body.\n",
        "operationId": "addMember",
        "requestBody": {
          "description": "Member detail (without id field).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberWithoutId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Member created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available now.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/members/{mid}": {
      "get": {
        "summary": "Returns a specific member.",
        "description": "Get the member defined by the supplied id.\n",
        "operationId": "getMember",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of the member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maximum": 999,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member information returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "A member with the supplied member ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available now",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes a member.",
        "description": "Deletes a member defined by the supplied id.\n",
        "operationId": "deleteMember",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of the member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maximum": 999,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "A member with the supplied member ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available now",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/members/{mid}/scores": {
      "post": {
        "summary": "Gets, or creates, a scores table object.",
        "description": "Gets, or creates, a scores table object, as determined by the member id and the date in the query string.\n",
        "operationId": "getOrCreateScores",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of a member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maximum": 999,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "A Javascript Date object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Date"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Scores table found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Scores"
                }
              }
            }
          },
          "201": {
            "description": "Scores table created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Scores"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available now.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/members/{mid}/sessions": {
      "post": {
        "summary": "Gets, or creates, a sessions table object.",
        "description": "Gets, or creates, a sessions table object, as determined by the member id and the date in the query string.\n",
        "operationId": "getOrCreateSessions",
        "parameters": [
          {
            "name": "mid",
            "in": "path",
            "description": "The value of the id property of a member.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maximum": 999,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "A Javascript Date object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Date"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Sessions table found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sessions"
                }
              }
            }
          },
          "201": {
            "description": "Sessions table created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sessions"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available now.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/scores": {
      "put": {
        "summary": "Updates a specific scores table.",
        "description": "A scores object is supplied which must have a id corresponding to an existing scores object.\nThe scores table with that id is updated with the supplied scores table.\n",
        "operationId": "updateScores",
        "requestBody": {
          "description": "Scores object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Scores"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Scores table updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Scores"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "The scores table to update was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available now.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sessions": {
      "put": {
        "summary": "Updates a specific sessions table.",
        "description": "A sessions object is supplied which must have a id corresponding to an existing sessions object.\nThe sessions table with that id is updated with the supplied sessions table.\n",
        "operationId": "updateSessions",
        "requestBody": {
          "description": "Sessions object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sessions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Sessions table updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sessions"
                }
              }
            }
          },
          "400": {
            "description": "The request is not a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "The sessions table to update was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "The database service is not available now.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Member": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 999,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "name": {
            "maxLength": 35,
            "type": "string",
            "format": "string",
            "example": "John Athlete"
          }
        },
        "description": "Member information"
      },
      "MemberWithoutId": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 35,
            "type": "string",
            "format": "string",
            "example": "John Athlete"
          }
        },
        "description": "Member information without the id field"
      },
      "Sessions": {
        "required": [
          "date",
          "id",
          "memberId",
          "sessions"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "memberId": {
            "maximum": 999,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sessions-row"
            }
          }
        }
      },
      "Scores": {
        "required": [
          "date",
          "id",
          "memberId",
          "scores"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "memberId": {
            "maximum": 999,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "scores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Scores-row"
            }
          }
        }
      },
      "Sessions-row": {
        "type": "object",
        "properties": {
          "session-type": {
            "type": "string",
            "format": "binary"
          },
          "rpe": {
            "type": "number",
            "format": "int32",
            "example": 5
          },
          "duration": {
            "type": "number",
            "format": "int32",
            "example": 50
          }
        }
      },
      "Scores-row": {
        "type": "object",
        "properties": {
          "item": {
            "type": "string",
            "format": "binary"
          },
          "monday": {
            "type": "number",
            "format": "int32",
            "example": 5
          },
          "tuesday": {
            "type": "number",
            "format": "int32",
            "example": 5
          },
          "wednesday": {
            "type": "number",
            "format": "int32",
            "example": 5
          },
          "thursday": {
            "type": "number",
            "format": "int32",
            "example": 5
          },
          "friday": {
            "type": "number",
            "format": "int32",
            "example": 5
          },
          "saturday": {
            "type": "number",
            "format": "int32",
            "example": 5
          },
          "sunday": {
            "type": "number",
            "format": "int32",
            "example": 5
          }
        }
      },
      "Date": {
        "required": [
          "date"
        ],
        "type": "object",
        "properties": {
          "date": {
            "maxLength": 24,
            "type": "string",
            "format": "date-string",
            "example": "2021-07-18T00:00:00.000Z"
          }
        },
        "description": "ISO Date string"
      },
      "Error": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "message": {
            "type": "string",
            "format": "string",
            "example": "Not found"
          }
        },
        "description": "Error report"
      },
      "Count": {
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32",
            "example": 5
          }
        },
        "description": "Count of documents."
      },
      "IsTestDatabase": {
        "required": [
          "isTestDatabase"
        ],
        "type": "object",
        "properties": {
          "isTestDatabase": {
            "type": "boolean",
            "example": false
          }
        },
        "description": "The value true informs that the test database is in use."
      }
    }
  }
}
