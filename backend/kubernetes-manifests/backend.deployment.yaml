kind: Deployment
apiVersion: apps/v1
metadata:
  name: pp-backend-deploy
  namespace: default
  labels:
    app: pp
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pp
      tier: backend
  # Describes the pods that will be created.
  template:
    metadata:
      labels:
        app: pp
        tier: backend
    spec:
      containers:
      - name: pp-backend-container
        image: gcr.io/project-perform/pp-backend:v1.0.0
        ports:
        - name: app-port
          # Backend server must be open on this port
          containerPort: 8080
        env:
        # Env variables here will override configmap below
        # Set PORT to match containerPort
        - name: PORT
          value: '8080'
        envFrom:
        - configMapRef:
            name: pp-backend-configmap
        - secretRef:
            name: pp-backend-secret
        # Stops sending requests if this fails
        readinessProbe:
          httpGet:
            path: /ready
            port: app-port
          timeoutSeconds: 5
          failureThreshold: 20
          periodSeconds: 10
        # Restarts if this fails
        livenessProbe:
          httpGet:
            path: /health
            port: app-port
          initialDelaySeconds: 300
          # Must be 1s for liveness
          timeoutSeconds: 1
          failureThreshold: 1
          periodSeconds: 300
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        # Note: If set to 'Always' will fail on Minikube
        # 'Always' may avoid caching issues when making changes?
        imagePullPolicy: Always
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      schedulerName: default-scheduler
      resources:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
