/* MongoDB Playground assuming a local database connection */

// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

/* Select the database to use */
use('test');

const model = 'project-perform_sessions';
const memberId = 3;
const weeks = 52;
const retrieveDays = new Date(
  new Date().setDate(new Date().getDate() - 7 * weeks),
);
const aggregation = [
  /* select the specific member */
  { $match: { memberId: memberId } },
  /* select all tables in the last requested number of weeks */
  { $match: { date: { $gt: retrieveDays } } },
  /* sort by date ascending */
  { $sort: { date: 1 } },
  /* add extra fields to each document */
  {
    $project: {
      _id: 0,
      date: 1,
      /* sum of the product of rpe and duration (load) for all sessions */
      sessionsTotal: {
        $sum: {
          $map: {
            input: '$sessions',
            as: 'session',
            in: {
              $multiply: [
                { $ifNull: ['$$session.rpe', 0] },
                { $ifNull: ['$$session.duration', 0] },
              ],
            },
          },
        },
      },
      /* count of the number of non-zero sessions */
      count: {
        $sum: {
          $map: {
            input: '$sessions',
            as: 'session',
            in: {
              $cond: {
                if: {
                  $gt: [{ $ifNull: ['$$session.duration', 0] }, 0],
                },
                then: 1,
                else: 0,
              },
            },
          },
        },
      },
      /* average of the load of all non-zero duration sessions */
      average: {
        /* return 0, and not null, if no non-zero sessions */
        $ifNull: [
          {
            $round: [
              {
                $avg: {
                  $map: {
                    input: '$sessions',
                    as: 'session',
                    in: {
                      $cond: {
                        if: {
                          $gt: [{ $ifNull: ['$$session.duration', 0] }, 0],
                        },
                        then: {
                          $multiply: [
                            { $ifNull: ['$$session.rpe', 0] },
                            { $ifNull: ['$$session.duration', 0] },
                          ],
                        },
                        else: null,
                      },
                    },
                  },
                },
              },
              0,
            ],
          },
          0,
        ],
      },
      /* standard deviation of the load of all non-zero duration sessions */
      stdDev: {
        /* return 0, and not null, if no non-zro sessions */
        $ifNull: [
          {
            $round: [
              {
                $stdDevPop: {
                  $map: {
                    input: '$sessions',
                    as: 'session',
                    in: {
                      $cond: {
                        if: {
                          $gt: [{ $ifNull: ['$$session.duration', 0] }, 0],
                        },
                        then: {
                          $multiply: [
                            { $ifNull: ['$$session.rpe', 0] },
                            { $ifNull: ['$$session.duration', 0] },
                          ],
                        },
                        else: null,
                      },
                    },
                  },
                },
              },
              0,
            ],
          },
          0,
        ],
      },
    },
  },
];

  // const aggregation = [
  //   /* select the specific member */
  //   { $match: { memberId: memberId } },
  //   /* select all tables in the last requested number of weeks */
  //   { $match: { date: { $gt: retrieveDays } } },
  //   /* sort by date ascending */
  //   { $sort: { date: 1 } },
  //   { $project: {
  //       _id: 0,
  //       date: 1,
  //       total: {
  //         /* sum the output of the calculation on each array element */
  //           $sum: {
  //             /* iterate over each element in the scores array and for each element output a sum of all scores in that element */
  //               $map: {
  //                   input: '$scores',
  //                   as: 'score',
  //                   in: { $sum: [
  //                       { $ifNull: [ '$$score.monday', 0 ] },
  //                       { $ifNull: [ "$$score.tuesday", 0 ] },
  //                       { $ifNull: [ '$$score.wednesday', 0 ] },
  //                       { $ifNull: [ '$$score.thursday', 0 ] },
  //                       { $ifNull: [ '$$score.friday', 0 ] },
  //                       { $ifNull: [ "$$score.saturday", 0 ] },
  //                       { $ifNull: [ '$$score.sunday', 0 ] },
  //                   ]},
  //               },
  //           },
  //       },
  //   }},
  // ];

// Run the aggregation and open a cursor to the results.
// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.


db[model].aggregate(aggregation);
