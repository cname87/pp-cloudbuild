/**
  Custom Theming for Angular Material
 */

/* For more information: https://material.angular.io/guide/theming */
@use '@angular/material' as mat;

// Include the common styles for Angular Material. We include this here so that you only have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss (imported above). For each palette, you can optionally specify a default, lighter, and darker hue. Available color palettes: https://material.io/design/color/
$primary: mat.define-palette(mat.$deep-purple-palette, 200, 100, 300);
$accent: mat.define-palette(mat.$amber-palette, 200, 100, 300);
$warn: mat.define-palette(mat.$red-palette, A200, A100, A400);
$content: mat.define-palette(mat.$blue-grey-palette, 100, 50, 200);

/* colors for component styling */
$primary-darker: mat.get-color-from-palette($primary, 'darker');
$primary-normal: mat.get-color-from-palette($primary);
$primary-lighter: mat.get-color-from-palette($primary, 'lighter');
$accent-darker: mat.get-color-from-palette($accent, 'darker');
$accent-normal: mat.get-color-from-palette($accent);
$accent-lighter: mat.get-color-from-palette($accent, 'lighter');
$warn-darker: mat.get-color-from-palette($warn, 'darker');
$warn-normal: mat.get-color-from-palette($warn);
$warn-lighter: mat.get-color-from-palette($warn, 'lighter');
$content-darker: mat.get-color-from-palette($content, 'darker');
$content-normal:  mat.get-color-from-palette($content);
$content-lighter: mat.get-color-from-palette($content, 'lighter');

/* Define a custom typography config with the default typography levels but referenced to rem with the ratio 16px = 1rem, i.e. if you increase 1rem from 16px default these will scale accordingly */
/* aiming to scale for a min screen size of 360px wide */
$typoConfig: mat.define-typography-config(
  $font-family:   'Roboto, "Helvetica Neue", sans-serif',
  /* each defines font size, line height and font weight */
  $display-4:     mat.define-typography-level(calc(112rem/16), calc(112rem/16), 300, $letter-spacing: -0.05em),
  $display-3:     mat.define-typography-level(calc(56rem/16), calc(56rem/16), 400, $letter-spacing: -0.02em),
  $display-2:     mat.define-typography-level(calc(45rem/16), calc(48rem/16), 400, $letter-spacing: -0.005em),
  $display-1:     mat.define-typography-level(calc(34rem/16), calc(40rem/16), 400),
  $headline:      mat.define-typography-level(calc(24rem/16), calc(32rem/16), 400),
  $title:         mat.define-typography-level(calc(20rem/16), calc(32rem/16), 500),
  $subheading-2:  mat.define-typography-level(calc(16rem/16), calc(28rem/16), 400),
  $subheading-1:  mat.define-typography-level(calc(15rem/16), calc(24rem/16), 400),
  $body-2:        mat.define-typography-level(calc(14rem/16), calc(24rem/16), 500),
  $body-1:        mat.define-typography-level(calc(14rem/16), calc(20rem/16), 400),
  $caption:       mat.define-typography-level(calc(12rem/16), calc(20rem/16), 400),
  $button:        mat.define-typography-level(calc(14rem/16), calc(14rem/16), 500),
  /* line-height must be unit-less fraction of the font-size */
  $input:         mat.define-typography-level(inherit, 1.125, 400),
);

// Create the theme object. A theme consists of configurations for individual theming systems such as "color" or "typography".
$theme: mat.define-light-theme((
  color: (
    primary: $primary,
    accent: $accent,
    warn: $warn,
  ),
  typography: $typoConfig,
));

/* style core material components with imported theme */
@include mat.core-theme($theme);

// Include theme styles for core and every component.
// Alternatively, you can import and @include the theme mixins for each component that you are using.
@include mat.all-component-themes($theme);
